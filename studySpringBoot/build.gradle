plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	//JDBC 연결 디팬던시 추가
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	//implementation 'org.springframework.boot:spring-boot-starter-jdbc' => JPA에 포함
	
	//JPA 연결
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	
	//	* 중요
	// 	Application Programming Interface
	// 	자바의 인터페이스
	// 	JDBC API : DB랑 얘기할 때 앞장서서,
	//				+ 근데 인터페이스임
	//				ex. DataSource 객체로 썼는데, interface네
	//					사실 진짜 구현체는 따로 있음, 업캐스팅해서 썻을 뿐
	// 	JPA(PI) : ORM 앞장서서,
	//			  + 근데.. 얘도 인터페이스,
	//				ex. ______객체가 열일 할 것 같은데.. interface일 것 같고..
	//					진짜 구현체는 Hibernate다
	
	// 	JPA(Java Persistence API)
	// 		역할: Object - Mapping 'Entity' in 'EntityContext' - DB 가로줄(행)
	//		1. JPA가 관리하는 객체: Entity (DB 1:1)
	//		2. Entity를 모아두는 공간 : EntityContext
	//			- Mapping을 고려하는 공간
	//		3. JDBC API - Datasource(interface) - 구현체 hikari : 터널 뚫어주고, SQL 전달
	//			JPA API - EntityManager(interface) 
	//						-> hibernate : Entity를 관리(라이프 사이클 관리, 영속성 관리) 
	//						CRUD 작업 수행할 수 있는 method 제공
	
	//	!!여기서 잠깐
	//		Spring Data JPA를 build.gradle에 추가할 때
	//		메이븐 레포지토리에서 찾아서 추가했는데..
	//		알고보니, 거기에 이런 내용이 적혀있었다!
	//		인터페이스면.. 구현체가 1개(hibernate)가 아니라 여러개 가능할 것
	//			- Spring에서 JPA의 기본 구현체로 하이버네이트를 선정해뒀다.	
	//		JDBC도 포함
	//		= build.gradle에서 JDBC 제외 해도 되겠다.
}

tasks.named('test') {
	useJUnitPlatform()
}
